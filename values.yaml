# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
intro: 1

image:
  repository: cubejs/cube
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

cube_images:
  cubejs: "cubejs/cube:latest"
  cubeStore: "cubejs/cubestore:latest"   

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Environment variables for cube API and cubestore components
# Please ensure that this section is edited in order to support the DB 
# of your choice. 
# Cube integrations page https://cube.dev/integrations provides the 
# all the info needed to configure your datasources

env:
  # this section is for the CUBE API deployment and the refresh worker
  # Keep in mind that the env var CUBEJS_REFRESH_WORKER to differentiate
  # the refresh worker from the API node is inside the template as it is
  # a mandatory env var for cube refresh worker role
  # the sample mysql used below uses the publicly available mysql container with the 
  # sakila db pre-populated: https://github.com/sakiladb/mysql
  cube:
  - name: CUBEJS_DB_TYPE
    value: mysql
  - name: CUBEJS_DEV_MODE
    value: 'true'
  - name: CUBEJS_DB_HOST
    value: mysql.default
  - name: CUBEJS_DB_NAME
    value: sakila
  - name: CUBEJS_DB_USER
    value: sakila
  - name: CUBEJS_DB_PASS
    value: p_ssW0rd
  - name: CUBEJS_DB_SSL
    value: 'false'
  - name: CUBEJS_DEFAULT_API_SCOPES
    value: graphql,meta,data,jobs
  - name: CUBEJS_CUBESTORE_HOST
    value: cubestore-router   
  - name: CUBEJS_API_SECRET
    value: secret
  - name: CUBEJS_LOG_LEVEL
    value: trace
  - name: CUBEJS_PG_SQL_PORT
    value: '15432'  
  
  # Cubestore router and store worker env vars are as below
  # keep in mind that the env vars that differentiate the router from the worker
  # is explained here: https://cube.dev/docs/product/deployment#cube-store 
  # and the specific env vars that differentiate  are in the respectice deployment files
  cubestore:
  - name: CUBESTORE_REMOTE_DIR
    value: /cube/data
  - name: CUBEJS_LOG_LEVEL
    value: trace

# Sections for each of the components of the cube cluster
# Edit as per need.
cubeApi:
  image: "cubejs/cube:latest"
  service:
    type: ClusterIP
    port: 4000
    service_port: 4000  
  replicas: 1  

cubeRefreshWorker:
  image: "cubejs/cube:latest"
  service:
    type: ClusterIP
    port: 80
    service_port: 80
  replicas: 1  

cubestoreRouter:
  image: "cubejs/cubestore:latest"   
  service:
    type: ClusterIP
    port: 9999
    service_port: 9999
  replicas: 1    

cubestoreWorker:
  image: "cubejs/cubestore:latest"   
  service:
    type: ClusterIP
    port: 10001
    service_port: 10001
  replicas: 2

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
